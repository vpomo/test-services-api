basePath: /api
definitions:
  article.Article:
    properties:
      author_id:
        type: string
      comments:
        items:
          $ref: '#/definitions/article.Comment'
        type: array
      content:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  article.Comment:
    properties:
      article_id:
        type: string
      author_id:
        type: string
      content:
        type: string
      id:
        type: string
    type: object
  handler.AddCommentRequest:
    properties:
      content:
        example: This is a comment.
        type: string
    type: object
  handler.CreateArticleRequest:
    properties:
      content:
        example: This is the content of the article.
        type: string
      title:
        example: My Article Title
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  handler.RegisterRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    type: object
  handler.UpdateArticleRequest:
    properties:
      content:
        example: This is the updated content of the article.
        type: string
      title:
        example: Updated Article Title
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /articles:
    post:
      consumes:
      - application/json
      description: Creates a new article with the provided title and content.
      operationId: create-article
      parameters:
      - description: Article details
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/handler.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns created article
          schema:
            $ref: '#/definitions/article.Article'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new article
  /articles/{id}:
    get:
      description: Retrieves an article by its ID.
      operationId: get-article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns the article
          schema:
            $ref: '#/definitions/article.Article'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get an article by ID
    put:
      consumes:
      - application/json
      description: Updates an article with the provided title and content.
      operationId: update-article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated article details
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns updated article
          schema:
            $ref: '#/definitions/article.Article'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update an existing article
  /articles/{id}/comments:
    post:
      consumes:
      - application/json
      description: Adds a comment to an article with the provided content.
      operationId: add-comment
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment details
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handler.AddCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns added comment
          schema:
            $ref: '#/definitions/article.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a comment to an article
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user with the provided email and password.
      operationId: login-user
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Log in a user
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided username, email, and password.
      operationId: register-user
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns user_id
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user
  /validate:
    get:
      description: Validates the provided user token.
      operationId: validate-token
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Validate a user token
swagger: "2.0"
